<?php

namespace Librinfo\SonataSyliusUserBundle\Entity\Test\Unit;

use Librinfo\SonataSyliusUserBundle\Entity\SonataGroup;
use Symfony\Component\Security\Core\User\AdvancedUserInterface;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-05-10 at 17:49:31.
 */
use PHPUnit\Framework\TestCase;

class SonataGroupTest extends TestCase {

    /**
     * @var SonataGroup
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new SonataGroup;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::addRole
     * @todo   Implement testAddRole().
     */
    public function testAddRole() {
        /**
         * @todo 1.appeler addRole
         * 2. appeler getRoles
         * 3. faire un assert pour vÃ©rifier que le role qu'on a passer a addRoles
         * est bien dans le resultat de getRoles
         */
        $role = 'foo';

        $this->object->addRole($role);
        //var_dump($role);
        $listRoles = $this->object->getRoles();
        //var_dump($listRoles);
        // we search 'foo' in uppercase because addRoles transform a string in uppercase
        $this->assertContains('FOO', $listRoles);
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::getId
     * @todo   Implement testGetId().
     */
    public function testGetId() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::getName
     * @todo   Implement testGetName().
     */
    public function testGetName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::hasRole
     * @todo   Implement testHasRole().
     */
    public function testHasRole() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::getRoles
     * @todo   Implement testGetRoles().
     */
    public function testGetRoles() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::removeRole
     * @todo   Implement testRemoveRole().
     */
    public function testRemoveRole() {
        $role = 'foo';
        $role2 = 'bar';
        $role3 = 'zoo';

        $this->object->addRole($role);
        $this->object->addRole($role2);
        $this->object->addRole($role3);
        //var_dump($role);


        $listRoles = $this->object->getRoles();
        //var_dump($listRoles);
        $this->object->removeRole($role2);
        //we call again getRoles() for refresh the array
        $listRoles = $this->object->getRoles();
        //var_dump($listRoles);

        $this->assertNotContains('bar', $listRoles);
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::setName
     * @todo   Implement testSetName().
     */
    public function testSetName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::setRoles
     * @todo   Implement testSetRoles().
     */
    public function testSetRoles() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::addUser
     * @todo   Implement testAddUser().
     */
    public function testAddUser() {
        $this->markTestSkipped(
                'need call to addGroup'
        );
        $toto = 'weekend';
        $user = $this->getMockForAbstractClass(AdvancedUserInterface::class);
        //var_dump($toto);
        //$this->object->addUser($user);
        //$get = $this->object->getUsers();
        //it's the same thing 
        $get = $this->object->addUser($user)->getUsers();
        //var_dump($get);
        $this->assertNotNull($get);
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::removeUser
     * @todo   Implement testRemoveUser().
     */
    public function testRemoveUser() {
        $this->markTestSkipped(
                'need call to removeGroup'
        );

        $toto = 'lundi matin';
        $user = $this
                ->getMockForAbstractClass(AdvancedUserInterface::class);
        //var_dump($toto);

        $this->object->addUser($user);
        $get = $this->object->getUsers();
        //var_dump($get);
        $get = $this->object->removeUser($user);
        $get = $this->object->getUsers();
        //var_dump($get);

        $this->assertEquals(0, $get->count());
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::getUsers
     * @todo   Implement testGetUsers().
     */
    public function testGetUsers() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::setUsers
     * @todo   Implement testSetUsers().
     */
    public function testSetUsers() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::setId
     * @todo   Implement testSetId().
     */
    public function testSetId() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Librinfo\SonataSyliusUserBundle\Entity\SonataGroup::isNew
     * @todo   Implement testIsNew().
     */
    public function testIsNew() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
